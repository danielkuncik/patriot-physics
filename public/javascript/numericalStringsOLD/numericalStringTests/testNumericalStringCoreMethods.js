/**
 * Created by danielkuncik on 5/31/17.
 */

var arrayToTest, i;

// test cleanUpNumericalString
arrayToTest = [
    ['0002445000','2445000'],
    ['0000.0000412','0.0000412'],
    ['3.0E8','3.0e8'],
    ['1.23E+5','1.23e5'],
    ['+1245.631','1245.631'],
    ['-1245.631','-1245.631'],
    ['4.56e-8','4.56e-8'],
    ['00001.56E+9','1.56e9'],
    ['-000021','-21'],
    ['-0004.78E+98','-4.78e98'],
    ['4.5e006','4.5e6'],
    ['4.5e-006','4.5e-6'],
    ['045e+006','45e6'],
    ['4.5e6','4.5e6'],
    ['0000.000432e4','0.000432e4'],
    ['+.56','0.56'],
    ['-.56','-0.56'],
    ['3.5e0','3.5'], // there should be no e0!
    ['3.5e0000','3.5'],
    ['3.5E0000','3.5'],
    ['0000.0000','0'],
    ['-0','0']
];


for (i = 0; i < arrayToTest.length; i++) {
    testFunction(cleanUpNumericalString, 'cleanUpNumericalString', arrayToTest[i][0],[],arrayToTest[i][1]);
}



// test getStandardNotation
arrayToTest = [
    // from above
    ['0002445000',[],'2445000'],
    ['0000.0000412',[],'0.0000412'],
    ['3.0E8',[],'3.0e8'], // no standard notation answer with 2 sig figs
    ['3.0E8',[1],'300000000'],
    ['3.0E8',[9],'300000000.'],
    ['1.23E+5',[],'123000'],
    ['+1245.631',[],'1245.631'],
    ['-1245.631',[],'-1245.631'],
    ['4.56e-8',[],'0.0000000456'],
    ['00001.56E+9',[],'1560000000'],
    ['00001.56E+9',[2],'1600000000'],
    ['00001.56E+9',[1],'2000000000'],
    ['-000021',[],'-21'],
    ['4.5e006',[],'4500000'],
    ['4.5e-006',[],'0.0000045'],
    ['045e+006',[],'45000000'],
    ['4.5e6',[],'4500000'],
    ['0000.000432e4',[],'4.32'],
    ['+.56',[],'0.56'],
    ['-.56',[],'-0.56'],
    ['3.5e0',[],'3.5'],
    ['3.5e0000',[],'3.5'],
    ['3.5E0000',[],'3.5'],
    ['0000.0000',[],'0'],
    ['-0',[],'0'],
    // tests taht involve a decimal point at the end
    ['1e4',[5],'10000.'],
    ['10',[2],'10.'],
    ['1000',[4],'1000.'],
    ['1000',[3],'1.00e3'],
    ['1000',[5],'1000.0'],
    ['6.89e6',[7],'6890000.'],
    ['8.67e4',[5],'86700.'],
    // from the CPO physics first worksheet scientific to standard
    ['1.6e-19',[],'0.00000000000000000016'],
    ['5.58E21',[],'5580000000000000000000'],
    ['2e10',[],'20000000000'],
    ['+2.39E5',[],'239000'],
    ['1.67E-27',[],'0.00000000000000000000000000167'],
    ['1.58e8',[],'158000000'],
    ['9.29E+7',[],'92900000'],
    ['9.29E+7',[3],'92900000'],
    ['9.29E+7',[4],'9.290e7'], // no standard notation solution with 4 sig figs
    ['9.29E+7',[2],'93000000'],
    ['9.29E+7',[1],'90000000'],
    ['5e-4',[],'0.0005'],
    ['5e-4',[5],'0.00050000'],
    ['2.63E8',[],'263000000'],
    ['1.22E+9',[],'1220000000'],
    ['1E-3',[],'0.001'],
    ['3.4e2',[],'340'],
    ['3.4e2',[1],'300'],
    ['3.4e2',[2],'340'],
    ['3.4e2',[3],'340.'],
    ['3.4e2',[4],'340.0'],
    ['3.4e2',[5],'340.00'],
    // some with negative signs
    ['-3.4e2',[],'-340'],
    ['-3.4e2',[1],'-300'],
    ['-3.4e2',[2],'-340'],
    ['-3.4e2',[3],'-340.'],
    ['-3.4e2',[4],'-340.0'],
    ['-3.4e2',[5],'-340.00'],
    ['-2e10',[],'-20000000000'],
    ['-2.39E5',[],'-239000'],
    ['-1.67E-27',[],'-0.00000000000000000000000000167'],
    ['-1.58e8',[],'-158000000'],
    ['-9.29E+7',[],'-92900000'],
    // tests i wrote for the scientific to standard function previously
    ['+1.124E6',[], '1124000'],
    ['+1.124e-6',[], '0.000001124'],
    ['1324.124E-6',[], '0.001324124'],
    ['3e8',[], '300000000'],
    // tests i wrote for rounding standard notation function, with some negative signs thrown in
    ['+1245', [2], '1200'],
    ['1265', [2], '1300'],
    ['-1245', [3], '-1250'],
    ['1245', [1], '1000'],
    ['-1501', [1], '-2000'],
    ['1499', [1], '1000'],
    ['1245', [6], '1245.00'],
    ['-0.0000345', [1], '-0.00003'],
    ['0.0000345', [3], '0.0000345'],
    ['-0.0000345', [8], '-0.000034500000'],
    ['1000000.3',[7],'1000000.'],
    ['-1000000',[4],'-1.000e6'],
    ['-1030000',[3],'-1030000'],
    ['1030000',[4],'1.030e6'],
    ['-1030000',[2],'-1.0e6'],
    ['1000000',[1],'1000000'],
    ['12.456', [3], '12.5'],
    ['56.8', [2], '57'],
    ['-56.2', [2], '-56'],
    ['60.2', [2], '60.'],
    ['60.5', [2], '61'],
    ['+99.5553', [5], '99.555'],
    ['-00122.3456', [4], '-122.3'],
    ['00122.3756', [4], '122.4'],
    ['+1999', [2], '2.0e3'],
    ['1', [1], '1'],
    ['80', [2], '80.'],
    ['+000650', [3], '650.'],
    ['000650', [2], '650'],
    ['+000650', [1], '700'],
    /// the most quirky test --- which will require some work!
    ['999.999',[3],'1.00e3'],
    ['9.9',[1],'10'],
    ['9999',[1],'10000'],
    ['9999',[2],'1.0e4'],
    ['9.99e7',[],'99900000'],
    // to end
    ['0',[],'0'],
    ['0',[12],'0'],
    ['-0',[12],'0'],
    ['0e8',[12],'0'],
    ['12567.85',[0],'0'],
    ['3.456e8',[0],'0']
];
// do i want more tests???

for (i = 0; i < arrayToTest.length; i++) {
    testFunction(getStandardNotation, 'getStandardNotation', arrayToTest[i][0],arrayToTest[i][1],arrayToTest[i][2]);
}





// test getScientificNotation
arrayToTest = [
    // from above
    ['0002445000',[],'2.445e6'],
    ['0000.0000412',[],'4.12e-5'],
    ['3.0E8',[],'3.0e8'],
    ['1.23E+5',[],'1.23e5'],
    ['+1245.631',[3],'1.25e3'],
    ['-1245.631',[],'-1.245631e3'],
    ['4.56e-8',[],'4.56e-8'],
    ['00001.56E+9',[],'1.56e9'],
    ['-000021',[],'-2.1e1'],
    ['-0004.78E+98',[],'-4.78e98'],
    ['4.5e006',[],'4.5e6'],
    ['4.5e-006',[],'4.5e-6'],
    ['045e+006',[4],'4.500e7'],
    ['4.5e6',[],'4.5e6'],
    ['0000.000432e4',[],'4.32'], /// no e0, if that then just return standard notation
    ['0000.00000000432e4',[],'4.32e-5'],
    ['+.56',[],'5.6e-1'],
    ['-.56',[],'-5.6e-1'],
    ['3.5e0',[],'3.5'],
    ['3.5e0000',[],'3.5'], // do i want e0???? should i take these out????? (these are redundant!)
    ['3.5E0000',[],'3.5'],
    ['0000.0000',[],'0'],
    ['-0',[],'0'],
    /// from CPO physics first worksheet
    ['0.0453',[],'4.53e-2'],
    ['18700000',[],'1.87e7'],
    ['0.257',[],'2.57e-1'],
    ['999',[],'9.99e2'],
    ['264000',[],'2.64e5'],
    ['761000000',[],'7.61e8'],
    ['1030',[],'1.03e3'],
    ['0.00120',[],'1.20e-3'],
    ['0.03040',[],'3.040e-2'],
    ['0.000000000000000052',[],'5.2e-17'],
    ['42000000000000',[],'4.2e13'],
    ['7650000',[],'7.65e6'],
    ['0.000000999',[],'9.99e-7'],
    ['5670000000000',[],'5.67e12'],
    ['281000000',[],'2.81e8'],
    ['120000000000000',[],'1.2e14'],
    ['0.00000000000000000000000000000091',[],'9.1e-31'],
    ['0.00033',[],'3.3e-4'],
    ['4400000',[],'4.4e6'],
    ['65100000',[],'6.51e7'],
    ['27800',[],'2.78e4'],
    ['200000000000',[],'2e11'],
    ['25200000',[],'2.52e7'],
    ['137',[],'1.37e2'],
    ['98.6',[],'9.86e1'],
    ['9.29E+7',[1],'9e7'],
    // from my numbers in limbo packet
    ['3.42e4',[],'3.42e4'],
    ['9.23e8',[],'9.23e8'],
    ['.414e5',[],'4.14e4'],
    ['0.0070e-5',[],'7.0e-8'],
    ['1.10e0',[],'1.10'],
    ['921.e4',[],'9.21e6'],
    ['11.38e5',[],'1.138e6'],
    ['6.0e9',[],'6.0e9'],
    ['34.4e1',[],'3.44e2'],
    ['746.2e15',[],'7.462e17'],
    ['0.097e5',[],'9.7e3'],
    ['5.67e11',[],'5.67e11'],
    ///with sig figs set (from testNumericalStringConversions)
    ['124124', [3], '1.24e5'],
    ['124124', [2], '1.2e5'],
    ['124124', [1], '1e5'],
    ['124124', [5], '1.2412e5'],
    ['51.51512', [3], '5.15e1'],
    ['000012512.12124', [4], '1.251e4'],
    ['0.000001231', [3], '1.23e-6'],
    ['.0000012', [3], '1.20e-6'],
    ['1.532', [3], '1.53'],
    ['799.921', [3], '8.00e2'],
    /// the most quirky test --- which will require some work!
    ['999.999',[3],'1.00e3'],
    ['9.9',[1],'1e1'],
    ['9999',[1],'1e4'],
    ['9999',[2],'1.0e4'],
    // more tests with negative signs
    ['-24',[5],'-2.4000e1'],
    ['-.14',[1],'-1e-1'],
    ['-0.000012567',[3],'-1.26e-5'],
    // to end
    ['0',[],'0'],
    ['0',[12],'0'],
    ['-0',[12],'0'],
    ['0e8',[12],'0'],
    ['12567.85',[0],'0'],
    ['3.456e8',[0],'0']
];
/// I need to run more tests with sigFigs set (i will add more, there's never too many tests


for (i = 0; i < arrayToTest.length; i++) {
    testFunction(getScientificNotation, 'getScientificNotation', arrayToTest[i][0],arrayToTest[i][1],arrayToTest[i][2]);
}




// test getIntegerExponentForm
// my own rule: in integer exponent form, all DIGITS after the zero are significant, zero or not
// (because, remember, it exists only for my random number generator program)
arrayToTest = [
    ['0002445000',[],'2445e3'],
    ['0000.0000412',[],'412e-7'], // is it necessary to have e0? do i want e0?
    ['3.0E8',[],'30e7'],
    ['1.23E+5',[],'123e3'],
    ['+1245.631',[3],'125e1'],
    ['-1245.631',[],'-1245631e-3'],
    ['4.56e-8',[],'456e-10'],
    ['00001.56E+9',[],'156e7'],
    ['-000021',[],'-21'],
    ['-0004.78E+98',[],'-478e96'],
    ['4.5e006',[],'45e5'],
    ['4.5e-006',[],'45e-7'],
    ['045e+006',[4],'4500e4'],
    ['4.5e6',[],'45e5'],
    ['0000.000432e4',[],'432e-2'],
    ['0000.00000000432e4',[],'432e-7'],
    ['+.56',[],'56e-2'],
    ['-.56',[],'-56e-2'],
    ['3.5e0',[],'35e-1'],
    ['3.5e0000',[],'35e-1'],
    ['3.5E0000',[],'35e-1'],
    ['0000.0000',[],'0'],
    ['-0',[],'0'],
    /// from CPO physics first worksheet standard to scientific
    ['0.0453',[],'453e-4'],
    ['18700000',[],'187e5'],
    ['0.257',[],'257e-3'],
    ['999',[],'999'],
    ['264000',[],'264e3'],
    ['761000000',[],'761e6'],
    ['1030',[],'103e1'],
    ['0.00120',[],'120e-5'],
    ['0.03040',[],'3040e-5'],
    ['0.000000000000000052',[],'52e-18'],
    ['42000000000000',[],'42e12'],
    ['7650000',[],'765e4'],
    ['0.000000999',[],'999e-9'],
    ['5670000000000',[],'567e10'],
    ['281000000',[],'281e6'],
    ['120000000000000',[],'12e13'],
    ['0.00000000000000000000000000000091',[],'91e-32'],
    ['0.00033',[],'33e-5'],
    ['4400000',[],'44e5'],
    ['65100000',[],'651e5'],
    ['27800',[],'278e2'],
    ['200000000000',[],'2e11'],
    ['25200000',[],'252e5'],
    ['137',[],'137'],
    ['98.6',[],'986e-1'],
    // from my numbers in limbo packet
    ['3.42e4',[],'342e2'],
    ['9.23e8',[],'923e6'],
    ['.414e5',[],'414e2'],
    ['0.0070e-5',[],'70e-9'],
    ['1.10e0',[],'110e-2'],
    ['921.e4',[],'921e4'],
    ['11.38e5',[],'1138e3'],
    ['6.0e9',[],'60e8'],
    ['34.4e1',[],'344'],
    ['746.2e15',[],'7462e14'],
    ['0.097e5',[],'97e2'],
    ['5.67e11',[],'567e9'],
    ///with sig figs set (from testNumericalStringConversions)
    ['124124', [3], '124e3'],
    ['124124', [2], '12e4'],
    ['124124', [1], '1e5'],
    ['124124', [5], '12412e1'],
    ['51.51512', [3], '515e-1'],
    ['000012512.12124', [4], '1251e1'],
    ['0.000001231', [3], '123e-8'],
    ['.0000012', [3], '120e-8'],
    ['1.532', [3], '153e-2'],
    ['799.921', [3], '800'], // hmmm, it isnt exactly 3 sig figs, but it think this is how it should be
    ['799.921', [1], '8e2'],
    ['799.921', [2], '80e1'],
    ['799.921', [4], '7999e-1'],
    ['799.921', [], '799921e-3'],
    /// the most quirky test --- which will require some work!
    ['999.999',[3],'100e1'],
    ['999.999',[4],'1000'],
    ['9.9',[1],'1e1'],
    ['9999',[1],'1e4'],
    ['9999',[2],'10e3'],
    // more tests with negative signs
    ['-24',[5],'-24000e-3'],
    ['-.14',[1],'-1e-1'],
    ['-0.000012567',[3],'-126e-7'],
    ['-.000012567',[3],'-126e-7'],
    // from the CPO physics first worksheet scientific to standard
    ['1.6e-19',[],'16e-20'],
    ['5.58E21',[],'558e19'],
    ['2e10',[],'2e10'],
    ['+2.39E5',[],'239e3'],
    ['1.67E-27',[],'167e-29'],
    ['1.58e8',[],'158e6'],
    ['9.29E+7',[],'929e5'],
    ['9.29E+7',[3],'929e5'],
    ['9.29E+7',[4],'9290e4'], // no standard notation solution with 4 sig figs
    ['9.29E+7',[2],'93e6'],
    ['9.29E+7',[1],'9e7'],
    ['5e-4',[],'5e-4'],
    ['5e-4',[5],'50000e-8'],
    ['2.63E8',[],'263e6'],
    ['1.22E+9',[],'122e7'],
    ['1E-3',[],'1e-3'],
    ['3.4e2',[],'34e1'],
    ['3.4e2',[1],'3e2'],
    ['3.4e2',[2],'34e1'],
    ['3.4e2',[3],'340'],
    ['3.4e2',[4],'3400e-1'],
    // some with negative signs
    ['-3.4e2',[],'-34e1'],
    ['-3.4e2',[1],'-3e2'],
    ['-3.4e2',[2],'-34e1'],
    ['-3.4e2',[3],'-340'],
    ['-2e10',[],'-2e10'],
    ['-2.39E5',[],'-239e3'],
    ['-1.67E-27',[],'-167e-29'],
    ['-1.58e8',[],'-158e6'],
    ['-9.29E+7',[],'-929e5'],
    // tests i wrote for the scientific to standard function previously
    ['+1.124E6',[], '1124e3'],
    ['+1.124e-6',[], '1124e-9'],
    ['1324.124E-6',[], '1324124e-9'],
    ['3e8',[], '3e8'],
    // tests i wrote for rounding standard notation function, with some negative signs thrown in
    ['+1245', [2], '12e2'],
    ['1265', [2], '13e2'],
    ['-1245', [3], '-125e1'],
    ['1245', [1], '1e3'],
    ['-1501', [1], '-2e3'],
    ['1499', [1], '1e3'],
    ['1245', [6], '124500e-2'],
    ['-0.0000345', [1], '-3e-5'],
    ['0.0000345', [3], '345e-7'],
    ['-0.0000345', [8], '-34500000e-12'],
    ['1000000.3',[7],'1000000'],
    ['-1000000',[4],'-1000e3'],
    ['-1030000',[3],'-103e4'],
    ['1030000',[4],'1030e3'],
    ['-1030000',[2],'-10e5'],
    ['1000000',[1],'1e6'],
    ['12.456', [3], '125e-1'],
    ['56.8', [2], '57'],
    ['-56.2', [2], '-56'],
    ['60.2', [2], '60'],
    ['60.5', [2], '61'],
    ['+99.5553', [5], '99555e-3'],
    ['-00122.3456', [4], '-1223e-1'],
    ['00122.3756', [4], '1224e-1'],
    ['+1999', [2], '20e2'],
    ['1', [1], '1'],
    ['80', [2], '80'],
    ['+000650', [3], '650'],
    ['000650', [2], '65e1'],
    ['+000650', [1], '7e2'],
    // from the method i wrote before called prepforrandomgeneration
    ['1200',[4],'1200'],
    ['1200',[3],'120e1'],
    ['1200',[2],'12e2'],
    ['1200',[5],'12000e-1'],
    ['1200',[6],'120000e-2'],
    ['24',[3],'240e-1'],
    ['3',[3],'300e-2'],
    ['3',[6],'300000e-5'],
    ['24',[2],'24'],
    ['3',[1],'3'],
    ['0.0005',[4],'5000e-7'],
    ['.000431',[2],'43e-5'],
    ['313253',[2],'31e4'],
    ['.4324',[6],'432400e-6'],
    // tests built on 1e4
    ['1e4',[1],'1e4'],
    ['1e4',[2],'10e3'],
    ['1e4',[3],'100e2'],
    ['1e4',[4],'1000e1'],
    ['1e4',[5],'10000'],
    ['1e4',[6],'100000e-1'],
    ['1e4',[7],'1000000e-2'],
    // to end
    ['0',[],'0'],
    ['0',[12],'0'],
    ['-0',[12],'0'],
    ['0e8',[12],'0'],
    ['12567.85',[0],'0'],
    ['3.456e8',[0],'0']
///

];

for (i = 0; i < arrayToTest.length; i++) {
    testFunction(getIntegerExponentForm, 'getIntegerExponentForm', arrayToTest[i][0],arrayToTest[i][1],arrayToTest[i][2]);
}



// i may hold off on these tests for awhile!
// test getMostPresentableForm
arrayToTest = [

];

for (i = 0; i < arrayToTest.length; i++) {
    testFunction(getMostPresentableForm, 'getMostPresentableForm', arrayToTest[i][0],arrayToTest[i][1],arrayToTest[i][2]);
}

