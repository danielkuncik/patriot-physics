1. there are three small issues with the "standard to scientific" and "roudning" function
-- awkwardness with the decimal point if there is only one scientific notation
-- the same issue emerges in the "round numerical string" function, if there are zero places rounded to it awkwardly places a decimal point at the end
-- also, the 'standard to scientific' function returns a number in limbo IF you run a number of all nines
-- should all exponents ahve a sign?? at the moment, my exponents, if they have no sign, are considered positive...should i add that too?

### DONE 2. create a 'scientific to standard' function

2. The 'get sig figs' needs to be really rewritten to reflect all the sig fig rules, based upon the results in the 'round standard to sig figs' function
--- i need to fully replace "getSigFigs" with "countSigFigs"

--- there should be a very simple 'eliminate leading zeroes' function

3. create a function that creates a random number with a certain number of significant figures

4. create a function 'add commas to long whole numbers'

- the test of the "walking functions" could be made more automatic (however, it is inside all of my other functions, so if they all work it should)

5. i should make some validation functions, that test if a string IS a numerical string, and i fit is in standard or scientific notation
---- then, no string that doesnt qualify should be allowed in the functions
(and, could i make some sort of class that brings all the functions together???)


6. at present, i dont think any of my functions work for NEGATIVE numbers, i need to fix that!

7. create my own number -> string and string -> number converters?
[for fun, i suppose?]

-- there should be a function called 'clean up' that combines correcting various stupid things, like deleting leading zeroes, or -.5 turns to -0.5, gets rid of unecessary positive signs, turns E to e


 // all of these validation functions return true for an empty string!!! (problem!)


This is becomming a package in and of itself that really belogns in its own project
(and then, i will need the package in order to create problems with proper text!)

 */


/*
interesting::: [im expanding a bit beyond this]

 A floating-point number consists of the following parts, in exactly the following order:

 Optionally, the first character may be a "-" character.
 One or more characters in the range "0—9".
 Optionally, the following parts, in exactly the following order:
 a "." character
 one or more characters in the range "0—9"
 Optionally, the following parts, in exactly the following order:
 a "e" character or "E" character
 optionally, a "-" character or "+" character
 One or more characters in the range "0—9".
 */

/*
this package will allow me to have different levels of correctness on numerical problems

there oculd be a level called "exactly correct, with precisely the correct number of significant figures
--- correct, but with two many or too few significant figures

--- correct within a rounding error
[and, does or does not ahve the correct number of significant figures!]
 */